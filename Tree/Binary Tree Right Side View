/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer>list=new ArrayList<>();
    int mlevel=0;
    public List<Integer> rightSideView(TreeNode root) {
        if(root==null){
            return list;
        }
        rightviewRecursion(root,1);
        return list;
    }
    
    void rightview(TreeNode root){
    Queue<TreeNode>queue=new LinkedList<>();
    queue.offer(root);
    while(!queue.isEmpty()){
        int count=queue.size();
        for(int i=0;i<count;i++){
        TreeNode node=queue.poll();
        if(i+1==count)
        list.add(node.val);
        if(node.left!=null)
        queue.offer(node.left);
        if(node.right!=null)
        queue.offer(node.right);
        }
    }
}

    
void rightviewRecursion(TreeNode currnode,int level){
    if(currnode==null){
        return ;
    }
    if(mlevel<level){
        list.add(currnode.val);
        mlevel=level;
    }
    rightviewRecursion(currnode.right, level+1);
    rightviewRecursion(currnode.left,level+1);
}

}
