//gfg
class Solution
{
	ArrayList <Integer> boundary(Node node)
	{
	     if(node==null){
            return new ArrayList<>();
        }
        
	    ArrayList<Integer>list=leftview(node);
	    ArrayList<Integer>list1=leaf(node);
	    ArrayList<Integer>list2=rightview(node.right);
	    Collections.reverse(list2);
	    list1.remove(0);
        if(list1.size()>0 && list2.size()!=0)
        list1.remove(list1.size()-1);
	    for(int i=0;i<list1.size();i++){
	        list.add(list1.get(i));
	    }
	    for(int i=0;i<list2.size();i++){
	        list.add(list2.get(i));
	    }
	    return list;   
	}
	
	
	ArrayList<Integer>leftview(Node node){
	     ArrayList<Integer>list=new ArrayList<>();
	    if(node==null){
            return list;
        }
        if(node.left==null){
            list.add(node.data);
            return list;
        }
        while(node!=null){
            list.add(node.data);
            if(node.left==null && node.right!=null){
                node=node.right;
            }
            else{
            node=node.left;
            }
        }
        return list;

	}
	
	
	
	ArrayList<Integer>leaf(Node node){
	    Stack<Node>stack=new Stack<>();
	    ArrayList<Integer>list=new ArrayList<>();
	    stack.push(node);
	    while(!stack.isEmpty()){
	        Node n=stack.pop();
	        if(n.left==null && n.right==null){
	            list.add(n.data);
	        }
	        else{
	        if(n.right!=null){
	            stack.push(n.right);
	        }
            if(n.left!=null){
	            stack.push(n.left);
	        }
	        }
	    }
	    return list;
	}
	
	
	ArrayList<Integer>rightview(Node node){
	    ArrayList<Integer>list=new ArrayList<>();
        if(node==null){
            return list;
        }
        while(node!=null){
            list.add(node.data);
            if(node.right==null && node.left!=null){
                node=node.left;
            }
            else
            node=node.right;
        }
	    
	    return list;
	}
}
